/*
 * =======================================================================
 *  VarCall DSL2 Pipeline Configuration
 * =======================================================================
 *  Default configuration file with settings for resources, containers,
 *  profiles, and workflows.
 */

nextflow.enable.dsl = 2

/*
 * =======================================================================
 *  Pipeline Metadata
 * =======================================================================
 */
manifest {
    name            = 'VarCall DSL2'
    author          = 'Mamana Mbiyavanga, Phelelani Mpangase, Gerrit Botha'
    defaultBranch   = 'main'
    homePage        = 'https://github.com/grbot/varcall'
    description     = 'Nextflow pipeline for variant calling following GATK Best Practices'
    mainScript      = 'main.nf'
    version         = '2.0.0'
    nextflowVersion = '>=21.10.3'
}

/*
 * =======================================================================
 *  Pipeline Parameters
 * =======================================================================
 */
params {
    // Project parameters
    project_name = "test"
    cohort_id = "test"
    outdir = "/scratch/$USER/varcall-dsl2/results"
    
    // Resource checking options
    system_resource_check = true // Set to false to skip resource check
    enforce_resource_check = true  // Set to false to continue despite resource warnings
    display_resource_check = true // Set to true to display resource check
    force_validation_pass = true // Set to false to continue fastq files validation failure

    force_validation_pass = false // Set to true to continue despite fastq files validation failure
    
    // Workflow selection and mode
    workflow = null
    test = false

    // Analysis settings
    sample_coverage = "high"  // Options: "high" or "low"
    type = "wgs"              // Options: "wgs" (whole genome) or "wes" (whole exome)
    trim_reads = false
    multiqc_config = "/users/$USER/varcall-dsl2/assets/multiqc_config.yaml"  // Optional

    // GATK GenomicsDB configuration
    db_path = "${outdir}/genomicsdb"
    db_update = 'no'

    // Reference genome configuration
    build = "b38"  // Options: "b37" or "b38"
    mt = build == "b37" ? "MT" : "chrM"  // Mitochondrial chromosome name per build
    
    // Chromosome definitions by build
    b37_chroms_auto = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']
    b37_chroms_all = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', 'X', 'Y', 'MT']
    b38_chroms_auto = ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19','chr20', 'chr21', 'chr22']
    b38_chroms_all = ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY', 'chrM']
    
    // PAR (Pseudo-autosomal regions) definitions - same for both builds
    chroms_par = ["x_par1_male", "x_par2_male", "x_nonpar_male", "y_par1_male", "y_par2_male", "y_nonpar_male"]
    
    // Reference file paths (will be overridden by user config)
    target_regions = null
    
    // Reference directory for GATK resources
    resources_dir = "/scratch/module5/references"
    
    // Default reference file paths (can be overridden)
    reference_files {
        ref = "${resources_dir}/hg38/Homo_sapiens_assembly38.chr20.fasta"
        dbsnp = "${resources_dir}/hg38/Homo_sapiens_assembly38.dbsnp138.chr20.vcf.gz"
        known_indels_1 = "${resources_dir}/hg38/Homo_sapiens_assembly38.known_indels.chr20.vcf.gz"
        known_indels_2 = "${resources_dir}/hg38/Mills_and_1000G_gold_standard.indels.hg38.chr20.vcf.gz"
        hapmap = "${resources_dir}/hg38/hapmap_3.3.hg38.chr20.vcf.gz"
        omni = "${resources_dir}/hg38/1000G_omni2.5.hg38.chr20.vcf.gz"
        phase1_snps = "${resources_dir}/hg38/1000G_phase1.snps.high_confidence.hg38.chr20.vcf.gz"
        golden_indels = "${resources_dir}/hg38/Mills_and_1000G_gold_standard.indels.hg38.chr20.vcf.gz"
    }
    
    // GATK Resource URLs for download_gatk workflow
    b37_resources {
        ref = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/human_g1k_v37_decoy.fasta.gz'
        ref_index = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/human_g1k_v37_decoy.fasta.fai.gz'
        ref_dict = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/human_g1k_v37_decoy.dict.gz'
        dbsnp = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/dbsnp_138.b37.vcf.gz'
        hapmap = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/hapmap_3.3.b37.vcf.gz'
        omni = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/1000G_omni2.5.b37.vcf.gz'
        phase1_snps = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/1000G_phase1.snps.high_confidence.b37.vcf.gz'
        golden_indels = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/Mills_and_1000G_gold_standard.indels.b37.vcf.gz'
        known_indels = 'ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/b37/1000G_phase1.indels.b37.vcf.gz'
    }
    
    b38_resources {
        ref = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta'
        ref_index = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta.fai'
        ref_dict = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.dict'
        dbsnp = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf'
        hapmap = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/hapmap_3.3.hg38.vcf.gz'
        omni = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/1000G_omni2.5.hg38.vcf.gz'
        phase1_snps = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/1000G_phase1.snps.high_confidence.hg38.vcf.gz'
        golden_indels = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz'
        known_indels = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz'
        mills = 'https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz'
    }
    
    // Optional chromosomes to extract (empty means all)
    chromosomes = []
    
    // FASTQ QC parameters
    adapter_file = "${projectDir}/assets/adapters/TruSeq3-PE.fa"
    
    // Sample sheet parameters
    sample_sheet = null
    update_samplesheet = true  // Whether to update the sample sheet with new file paths

    // Singularity configuration
    singularity_cache = "/scratch/$USER/.singularity/cache"
    singularity_tempdir = "/scratch/$USER/singularity_tmp"

    // Other parameters
    max_gaussians_snps = null
    max_gaussians_indels = null
    snp_filter_level = null

    // Filter and annotation parameters
    combine_vcfs = false         // Whether to combine all VCFs into a single file
    vcf_input = null            // Path to a single VCF file
    vcf_dir = null               // Path to a directory containing chromosome-split VCFs
    
    // VEP annotation settings
    vep_cache_dir = "/scratch/module5/references/vep_cache"
    vep_cache_version = "113"
    vep_cache_url = "https://ftp.ensembl.org/pub/release-113/variation/indexed_vep_cache/homo_sapiens_vep_113_GRCh38.tar.gz"
    force_cache = false
    download_vep_cache = false  // Set to true to automatically download the VEP cache
    
    // VEP plugins and options
    vep_plugins = ""  // Comma-separated list of plugins
    vep_plugin_dir = "${resources_dir}/vep_plugins"
    vep_extra_options = ""      // Additional command-line options for VEP

    // Filter thresholds (can be overridden by user)
    qd_threshold = 2.0          // Quality by Depth threshold
    fs_threshold = 60.0         // FisherStrand threshold
    mq_threshold = 40.0         // Mapping Quality threshold
    sor_threshold = 3.0         // StrandOddsRatio threshold
    readpos_threshold = -8.0    // ReadPosRankSum threshold
}

/*
 * =======================================================================
 *  Singularity Configuration (Default Container Engine)
 * =======================================================================
 */
singularity {
    enabled = true
    autoMounts = true
    pullTimeout = '60m'
    cacheDir = "${params.singularity_cache}"
}

/*
 * =======================================================================
 *  Executor Configuration
 * =======================================================================
 */
executor {
    jobName = { "${task.name.replaceAll(' ','_')}" }
    queueSize = 100
    submitRateLimit = '10 min'
}

/*
 * =======================================================================
 *  Process Configuration
 * =======================================================================
 */
process {
    // Default resource configuration
    cpus = 1
    memory = 4.GB
    time = 24.h

    // =====================================================================
    // 1. TOOL-SPECIFIC CONTAINER LABELS
    // =====================================================================
    
    withLabel: bwa {
        container = 'docker://staphb/bwa:0.7.17'
    }

    withLabel: samtools {
        container = 'quay.io/biocontainers/samtools:1.19.2--h50ea8bc_0'
    }

    withLabel: bcftools {
        container = 'quay.io/biocontainers/bcftools:1.19--h8b25389_0'
    }

    withLabel: htslib {
        container = 'quay.io/biocontainers/htslib:1.18--h81da01d_0'
    }

    withLabel: gatk {
        container = 'broadinstitute/gatk:4.4.0.0'
    }

    withLabel: fastqc {
        container = 'quay.io/biocontainers/fastqc:0.12.1--hdfd78af_0'
    }

    withLabel: multiqc {
        container = 'quay.io/biocontainers/multiqc:1.21--pyhdfd78af_0'
    }
    
    withLabel: python_pandas {
        container = 'python:3.10'
    }
    
    withLabel: trimmomatic {
        container = 'quay.io/biocontainers/trimmomatic:0.39--hdfd78af_2'
    }

    withLabel: samtools {
        container = 'quay.io/biocontainers/samtools:1.19.2--h50ea8bc_0'
    }

    withLabel: vep {
        container = 'docker://ensemblorg/ensembl-vep'
    }

    // =====================================================================
    // 2. COMMON RESOURCE LABELS
    // =====================================================================
    
    withLabel: 'small_mem' {
        memory = { 2.GB * task.attempt }
        cpus = 1
    }

    withLabel: 'medium_mem' {
        memory = { 4.GB * task.attempt }
        cpus = 4
    }

    withLabel: 'large_mem' {
        memory = { 8.GB * task.attempt }
        cpus = 8
    }

    withLabel: 'extra_large_mem' {
        memory = { 16.GB * task.attempt }
        cpus = 8
    }

    // Resource allocations for tool-specific labels
    withLabel: bwa_samtools {
        memory = { 8.GB * task.attempt }
        cpus = 8
    }

    withLabel: 'bcftools' {
        memory = { 4.GB * task.attempt }
        cpus = 4
    }

    withLabel: gatk {
        memory = { 12.GB * task.attempt }
        cpus = 4
    }

    withLabel: fastqc {
        memory = { 2.GB * task.attempt }
        cpus = 2
    }

    withLabel: multiqc {
        memory = { 2.GB * task.attempt }
        cpus = 1
    }
    
    withLabel: python_pandas {
        memory = { 2.GB * task.attempt }
        cpus = 1
    }
    
    withLabel: trimmomatic {
        memory = { 4.GB * task.attempt }
        cpus = 4
    }

    withLabel: samtools {
        memory = { 4.GB * task.attempt }
        cpus = 4
    }

    // =====================================================================
    // 3. PROCESS-SPECIFIC RESOURCE LABELS (withName)
    // =====================================================================
    
    // Samtools process overrides
    withName: 'run_bwa|run_bam_sort|run_recalibrate_bam|bam_to_cram|run_cram_flagstat|create_cram_md5sum|log_tool_version_samtools' {
        cpus = 4
        memory = { 4.GB * task.attempt }
    }

    withName: 'run_genomics_db_import_update' {
        memory = { 16.GB * task.attempt }
        time = '168h'
        cpus = 8
    }

    withName: 'run_backup_genomic_db' {
        errorStrategy = 'retry'
        maxRetries = 2
    }

    withName: 'run_combine_gvcfs' {
        memory = { 32.GB * task.attempt }
        time = '120h'
        cpus = 8
    }

    withName: 'run_concat_gvcfs' {
        memory = { 8.GB * task.attempt }
        time = '120h'
        cpus = 4
    }

    // =====================================================================
    // 4. TOOL-SPECIFIC PROCESS OPTIMIZATIONS
    // =====================================================================
    
    withLabel: gatk_genomicsdb {
        memory = { 12.GB * task.attempt }
        cpus = 4
        time = '240h'
    }

    withLabel: gatk_haplotypecaller {
        memory = { 8.GB * task.attempt }
        cpus = 8
    }
}

/*
 * =======================================================================
 *  Execution Profiles
 * =======================================================================
 */
profiles {
    // Local execution
    standard {
        process.executor = 'local'
    }
    
    // Container profiles
    docker {
        docker.enabled = true
        singularity.enabled = false
        docker.temp = 'auto'
    }
    
    singularity {
        singularity.enabled = true
        docker.enabled = false
        singularity.autoMounts = true
        singularity.pullTimeout = '60m'
        singularity.cacheDir = "$HOME/.singularity/cache"
    }
    
    // Cluster profiles
    ilifu {
        process.executor = 'slurm'
        process.queue = 'Main'
    }
    
    wits {
        process.executor = 'slurm'
        process.queue = 'batch'
    }
    
    cbio {
        process.executor = 'pbs'
        process.queue = 'dev'
    }
}

/*
 * =======================================================================
 *  Workflow Reporting Configuration
 * =======================================================================
 */
trace {
    enabled = true
    overwrite = true
    file = "${params.outdir}/nf-reports/${params.workflow}/${params.project_name}_trace.txt"
}

timeline {
    enabled = true
    overwrite = true
    file = "${params.outdir}/nf-reports/${params.workflow}/${params.project_name}_timeline.html"
}

report {
    enabled = true
    overwrite = true
    file = "${params.outdir}/nf-reports/${params.workflow}/${params.project_name}_report.html"
}
